#include <iostream>
#include <cmath>
#include <iomanip>

using namespace std;

float tridiagonal(float a[], float b[], float c[], float d[], float x[], int n) {
    float alpha[20], beta[20];
    alpha[0] = b[0];
    beta[0] = d[0] / b[0];

    // Forward sweep
    for (int i = 1; i < n; i++) {
        alpha[i] = b[i] - a[i] * c[i - 1] / alpha[i - 1];
        beta[i] = (d[i] - a[i] * beta[i - 1]) / alpha[i];
    }

    // Backward substitution
    x[n - 1] = beta[n - 1];
    for (int i = n - 2; i >= 0; i--) {
        x[i] = beta[i] - c[i] * x[i + 1] / alpha[i];
    }

    return 0;
}

float func(float x) {
    return ((x / 2) * (8 - x));
}

int main() {
    int i, j, m = 5, n = 8;
    float u[20][20], r, h, k;
    int c = 4;

    cout << "Enter value of dx: " << endl;
    cin >> h;
    cout << "Enter value of dt: " << endl;
    cin >> k;

    r = c * k / (h * h);
    cout << "The value of r is: " << r << endl;
    cout << fixed << setprecision(2);

    // Initialize boundary conditions
    for (j = 0; j <= m; j++) {
        u[0][j] = 0;
        u[n][j] = 0;
    }

    for (i = 1; i < n; i++) {
        u[i][0] = func(i * h);
    }

    float a[20], b[20], c_array[20], d[20], x[20];

    // Coefficients for the tridiagonal matrix
    for (i = 1; i < n - 1; i++) {
        a[i - 1] = -r;
        b[i - 1] = 1 + 2 * r;
        c_array[i - 1] = -r;
    }

    // Time-stepping loop
    for (j = 0; j < m; j++) {
        for (i = 1; i < n - 1; i++) {
            d[i - 1] = u[i][j];  // Right-hand side for the tridiagonal system
        }

        // Solve the tridiagonal system using Thomas algorithm
        tridiagonal(a, b, c_array, d, x, n - 2);

        // Update the solution
        for (i = 1; i < n - 1; i++) {
            u[i][j + 1] = x[i - 1];
        }
    }

    // Output the results
    for (j = 0; j <= m; j++) {
        for (i = 0; i <= n; i++) {
            cout << u[i][j] << "\t\t";
        }
        cout << endl;
    }

    return 0;
}
